/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ics4u;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.ImageIcon;

/**
 *
 * @author Nred
 */
public class ICS extends javax.swing.JFrame implements ActionListener, KeyListener {

    //Used across the board
    Methods m = new Methods();
    String[] picz = new String[5];
    ImageIcon[] in = new ImageIcon[5];
    int rnd, streak, mode = 0, curr, thisT;
    //used only in counting
    int crnd = (int) Math.ceil(Math.random() * 9), n;
    int[][] count = new int[10][2];
    int correct = 0, tries = 0;
    String[][] score = new String[25][2];
    //used only in schedule
    String[][] clock = new String[3][11];
    String check;

    /**
     * Creates new form ICS
     */
    public ICS() {
        n = m.num(score);//checks the number of scores saved
        try {
            FileReader fr = new FileReader("save.txt"); //reads from text file (located in "files"
            BufferedReader br = new BufferedReader(fr);
            //read and puts each line in the text document into a variable
            for (int i = 0; i < picz.length; i++) {
                picz[i] = br.readLine();
                in[i] = new ImageIcon(picz[i]);
            }
            for (int r = 0; r < 3; r++) {
                for (int c = 0; c < 11; c++) {
                    clock[r][c] = br.readLine();
                }
            }
            streak = Integer.parseInt(br.readLine());
            fr.close();
            br.close();
        } catch (IOException a) {
            System.out.println("Couldn't Load");//if it fails
        }

        initComponents();
        getContentPane().setBackground(Color.WHITE);
        addKeyListener(this);//starts recording key presses
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        counting = new javax.swing.JButton();
        schedule = new javax.swing.JButton();
        record = new javax.swing.JButton();
        back = new javax.swing.JButton();
        clock1 = new javax.swing.JButton();
        clock3 = new javax.swing.JButton();
        clock2 = new javax.swing.JButton();
        out = new javax.swing.JLabel();
        score1 = new javax.swing.JLabel();
        score2 = new javax.swing.JLabel();
        score4 = new javax.swing.JLabel();
        score3 = new javax.swing.JLabel();
        aClock3 = new javax.swing.JLabel();
        aClock1 = new javax.swing.JLabel();
        aClock2 = new javax.swing.JLabel();
        count1 = new javax.swing.JLabel();
        count2 = new javax.swing.JLabel();
        count3 = new javax.swing.JLabel();
        count4 = new javax.swing.JLabel();
        count5 = new javax.swing.JLabel();
        count6 = new javax.swing.JLabel();
        count7 = new javax.swing.JLabel();
        count8 = new javax.swing.JLabel();
        count9 = new javax.swing.JLabel();
        scoreBoard12 = new javax.swing.JLabel();
        scoreBoard11 = new javax.swing.JLabel();
        scoreBoard10 = new javax.swing.JLabel();
        scoreBoard9 = new javax.swing.JLabel();
        scoreBoard8 = new javax.swing.JLabel();
        scoreBoard7 = new javax.swing.JLabel();
        scoreBoard6 = new javax.swing.JLabel();
        scoreBoard5 = new javax.swing.JLabel();
        scoreBoard4 = new javax.swing.JLabel();
        scoreBoard3 = new javax.swing.JLabel();
        scoreBoard2 = new javax.swing.JLabel();
        scoreBoard1 = new javax.swing.JLabel();
        info = new javax.swing.JLabel();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(1185, 649));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        counting.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        counting.setText("Counting");
        counting.setBorder(null);
        counting.setBorderPainted(false);
        counting.setFocusPainted(true);
        counting.setFocusable(false);
        counting.setMargin(new java.awt.Insets(0, 0, 0, 0));
        counting.setPreferredSize(new java.awt.Dimension(73, 22));
        counting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countingActionPerformed(evt);
            }
        });
        getContentPane().add(counting);
        counting.setBounds(342, 310, 100, 28);

        schedule.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        schedule.setText("Schedule");
        schedule.setBorder(null);
        schedule.setFocusPainted(false);
        schedule.setFocusable(false);
        schedule.setMargin(new java.awt.Insets(0, 0, 0, 0));
        schedule.setPreferredSize(new java.awt.Dimension(73, 22));
        schedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleActionPerformed(evt);
            }
        });
        getContentPane().add(schedule);
        schedule.setBounds(742, 310, 100, 28);

        record.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        record.setText("Record");
        record.setFocusable(false);
        record.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordActionPerformed(evt);
            }
        });
        getContentPane().add(record);
        record.setBounds(542, 310, 100, 28);

        back.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        back.setText("Back");
        back.setFocusable(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(40, 40, 73, 25);
        back.setVisible(false);

        clock1.setFocusable(false);
        clock1.setPreferredSize(new java.awt.Dimension(73, 73));
        clock1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clock1ActionPerformed(evt);
            }
        });
        getContentPane().add(clock1);
        clock1.setBounds(1000, 74, 100, 100);
        clock1.setVisible(false);

        clock3.setFocusable(false);
        clock3.setPreferredSize(new java.awt.Dimension(73, 73));
        clock3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clock3ActionPerformed(evt);
            }
        });
        getContentPane().add(clock3);
        clock3.setBounds(1000, 474, 100, 100);
        clock3.setVisible(false);

        clock2.setFocusable(false);
        clock2.setPreferredSize(new java.awt.Dimension(100, 100));
        clock2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clock2ActionPerformed(evt);
            }
        });
        getContentPane().add(clock2);
        clock2.setBounds(1000, 274, 100, 100);
        clock2.setVisible(false);

        out.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(out);
        out.setBounds(350, 580, 490, 40);

        score1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        score1.setText("Correct: 0");
        score1.setFocusable(false);
        getContentPane().add(score1);
        score1.setBounds(50, 500, 170, 17);
        score1.setVisible(false);

        score2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        score2.setText("Tries: 0");
        score2.setFocusable(false);
        getContentPane().add(score2);
        score2.setBounds(50, 530, 130, 17);
        score2.setVisible(false);

        score4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        score4.setText("Longest Streak: "+streak);
        score4.setFocusable(false);
        getContentPane().add(score4);
        score4.setBounds(50, 590, 130, 17);
        score4.setVisible(false);

        score3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        score3.setText("Percent Correct: 0");
        score3.setFocusable(false);
        getContentPane().add(score3);
        score3.setBounds(50, 560, 150, 17);
        score3.setVisible(false);

        aClock3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        aClock3.setText("jLabel1");
        aClock3.setFocusable(false);
        getContentPane().add(aClock3);
        aClock3.setBounds(1020, 570, 80, 30);
        aClock3.setVisible(false);

        aClock1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        aClock1.setText("jLabel1");
        aClock1.setFocusable(false);
        getContentPane().add(aClock1);
        aClock1.setBounds(1020, 170, 80, 30);
        aClock1.setVisible(false);

        aClock2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        aClock2.setText("jLabel1");
        aClock2.setFocusable(false);
        getContentPane().add(aClock2);
        aClock2.setBounds(1020, 370, 80, 30);
        aClock2.setVisible(false);

        count1.setFocusable(false);
        getContentPane().add(count1);
        count1.setBounds(190, 100, 100, 100);

        count2.setFocusable(false);
        getContentPane().add(count2);
        count2.setBounds(270, 90, 100, 100);

        count3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        count3.setFocusable(false);
        getContentPane().add(count3);
        count3.setBounds(370, 80, 100, 100);

        count4.setFocusable(false);
        getContentPane().add(count4);
        count4.setBounds(440, 90, 100, 100);

        count5.setFocusable(false);
        getContentPane().add(count5);
        count5.setBounds(490, 90, 100, 100);

        count6.setFocusable(false);
        getContentPane().add(count6);
        count6.setBounds(530, 220, 100, 100);

        count7.setFocusable(false);
        getContentPane().add(count7);
        count7.setBounds(680, 120, 100, 100);

        count8.setFocusable(false);
        getContentPane().add(count8);
        count8.setBounds(750, 180, 100, 100);

        count9.setFocusable(false);
        getContentPane().add(count9);
        count9.setBounds(610, 200, 100, 100);

        scoreBoard12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard12);
        scoreBoard12.setBounds(447, 389, 290, 15);
        scoreBoard12.setVisible(false);

        scoreBoard11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard11);
        scoreBoard11.setBounds(447, 375, 290, 15);
        scoreBoard11.setVisible(false);

        scoreBoard10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard10);
        scoreBoard10.setBounds(447, 361, 290, 15);
        scoreBoard10.setVisible(false);

        scoreBoard9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard9);
        scoreBoard9.setBounds(447, 347, 290, 15);
        scoreBoard9.setVisible(false);

        scoreBoard8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard8);
        scoreBoard8.setBounds(447, 333, 290, 15);
        scoreBoard8.setVisible(false);

        scoreBoard7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard7);
        scoreBoard7.setBounds(447, 319, 290, 15);
        scoreBoard7.setVisible(false);

        scoreBoard6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard6);
        scoreBoard6.setBounds(447, 305, 290, 15);
        scoreBoard6.setVisible(false);

        scoreBoard5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard5);
        scoreBoard5.setBounds(447, 291, 290, 15);
        scoreBoard5.setVisible(false);

        scoreBoard4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard4);
        scoreBoard4.setBounds(447, 277, 290, 15);
        scoreBoard4.setVisible(false);

        scoreBoard3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard3);
        scoreBoard3.setBounds(447, 263, 290, 15);
        scoreBoard3.setVisible(false);

        scoreBoard2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard2);
        scoreBoard2.setBounds(447, 249, 290, 15);
        scoreBoard2.setVisible(false);

        scoreBoard1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreBoard1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBoard1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(scoreBoard1);
        scoreBoard1.setBounds(447, 235, 290, 15);
        scoreBoard1.setVisible(false);

        info.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(info);
        info.setBounds(342, 240, 500, 168);

        title.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Title Screen");
        getContentPane().add(title);
        title.setBounds(0, 0, 1170, 70);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void countingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countingActionPerformed
        title.setText("Counting");//switches to the counting game
        counting.setVisible(false);
        schedule.setVisible(false);
        record.setVisible(false);
        score1.setVisible(true);
        score2.setVisible(true);
        score3.setVisible(true);
        score4.setVisible(true);
        back.setVisible(true);
        mode = 1;
        rnd = (int) Math.ceil(Math.random() * 5 - 1);//runs corresponding game
        count = m.counting(crnd, count, getWidth(), getHeight());
        countPos();
    }//GEN-LAST:event_countingActionPerformed
    public void countClear() {//clears the icons from the shapes
        count1.setIcon(null);
        count2.setIcon(null);
        count3.setIcon(null);
        count4.setIcon(null);
        count5.setIcon(null);
        count6.setIcon(null);
        count7.setIcon(null);
        count8.setIcon(null);
        count9.setIcon(null);
    }

    public void countPos() {
        if (crnd >= 1) {
            count1.setBounds(count[0][0], count[0][1], 100, 100);
            count1.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 2) {
            count2.setBounds(count[1][0], count[1][1], 100, 100);
            count2.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 3) {
            count3.setBounds(count[2][0], count[2][1], 100, 100);
            count3.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 4) {
            count4.setBounds(count[3][0], count[3][1], 100, 100);
            count4.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 5) {
            count5.setBounds(count[4][0], count[4][1], 100, 100);
            count5.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 6) {
            count6.setBounds(count[5][0], count[5][1], 100, 100);
            count6.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 7) {
            count7.setBounds(count[6][0], count[6][1], 100, 100);
            count7.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 8) {
            count8.setBounds(count[7][0], count[7][1], 100, 100);
            count8.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 9) {
            count9.setBounds(count[8][0], count[8][1], 100, 100);
            count9.setIcon(in[rnd]);//draws the blocks in there random position
        }
    }
    private void scheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleActionPerformed
        title.setText("Schedule");
        counting.setVisible(false);
        schedule.setVisible(false);
        record.setVisible(false);
        mode = 1;
        back.setVisible(true);
        clock1.setVisible(true);
        clock2.setVisible(true);
        clock3.setVisible(true);
        aClock1.setVisible(true);
        aClock2.setVisible(true);
        aClock3.setVisible(true);
        time();
    }//GEN-LAST:event_scheduleActionPerformed

    private void clock1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clock1ActionPerformed
        checkClock(aClock1.getText());
    }//GEN-LAST:event_clock1ActionPerformed

    private void clock2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clock2ActionPerformed
        checkClock(aClock2.getText());
    }//GEN-LAST:event_clock2ActionPerformed

    private void clock3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clock3ActionPerformed
        checkClock(aClock3.getText());
    }//GEN-LAST:event_clock3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        score = m.score(score, m.num(score), thisT);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter("score.txt")); //starts writing   
            int up = 0;
            if (thisT > 0) {
                up = 1;
            }
            for (int i = 0; i < n + up; i++) {
                pw.println(score[i][0]);
                pw.println(score[i][1]);
            }
            pw.close();
        } catch (IOException a) {
            System.out.println("ERROR");
        }
        try {
            PrintWriter pw = new PrintWriter(new FileWriter("save.txt")); //starts writing   
            for (int i = 0; i < picz.length; i++) {
                pw.println(picz[i]);
            }
            for (int r = 0; r < 3; r++) {
                for (int c = 0; c < 11; c++) {
                    pw.println(clock[r][c]);
                }
            }
            pw.println(streak);
            pw.close();
        } catch (IOException a) {
            System.out.println("ERROR");
        }
    }//GEN-LAST:event_formWindowClosing

    private void recordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordActionPerformed
        title.setText("Record");
        record.setVisible(false);
        counting.setVisible(false);
        schedule.setVisible(false);
        back.setVisible(true);
        score = m.score(score, m.num(score), thisT);
        if (n != 0) {
            scoreBoard1.setText("Highest Score: " + streak);
            scoreBoard1.setVisible(true);
            if (n >= 1) {
                scoreBoard2.setText("A score of " + score[0][0] + " on " + score[0][1]);
                scoreBoard2.setVisible(true);
            }
            if (n >= 2) {
                scoreBoard3.setText("A score of " + score[1][0] + " on " + score[1][1]);
                scoreBoard3.setVisible(true);
            }
            if (n >= 3) {
                scoreBoard4.setText("A score of " + score[2][0] + " on " + score[2][1]);
                scoreBoard4.setVisible(true);
            }
            if (n >= 4) {
                scoreBoard5.setText("A score of " + score[3][0] + " on " + score[3][1]);
                scoreBoard5.setVisible(true);
            }
            if (n >= 5) {
                scoreBoard6.setText("A score of " + score[4][0] + " on " + score[4][1]);
                scoreBoard6.setVisible(true);
            }
            if (n >= 6) {
                scoreBoard7.setText("A score of " + score[5][0] + " on " + score[5][1]);
                scoreBoard7.setVisible(true);
            }
            if (n >= 7) {
                scoreBoard8.setText("A score of " + score[6][0] + " on " + score[6][1]);
                scoreBoard8.setVisible(true);
            }
            if (n >= 8) {
                scoreBoard9.setText("A score of " + score[7][0] + " on " + score[7][1]);
                scoreBoard9.setVisible(true);
            }
            if (n >= 9) {
                scoreBoard10.setText("A score of " + score[8][0] + " on " + score[8][1]);
                scoreBoard10.setVisible(true);
            }
            if (n >= 10) {
                scoreBoard11.setText("A score of " + score[9][0] + " on " + score[9][1]);
                scoreBoard11.setVisible(true);
            }
            if (n >= 11) {
                scoreBoard12.setText("A score of " + score[10][0] + " on " + score[10][1]);
                scoreBoard12.setVisible(true);
            }
        } else {
            scoreBoard7.setVisible(true);
            scoreBoard7.setText("Please play counting to start collecting scores");
        }
    }//GEN-LAST:event_recordActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        hide();
        back.setVisible(false);
    }//GEN-LAST:event_backActionPerformed
    public void checkClock(String s) {
        if (s.equals(check)) {
            out.setText("Correct!");
            time();
        } else {
            out.setText("Incorrect, Please Try Again");
        }
    }

    public void time() {
        crnd = (int) Math.ceil(Math.random() * 3);
        rnd = (int) Math.ceil(Math.random() * 11 - 1);
        info.setText(clock[1][rnd]);
        if (crnd == 1) {
            aClock1.setText(clock[0][rnd]);
            clock1.setIcon(new ImageIcon(clock[2][rnd]));
        } else if (crnd == 2) {
            aClock2.setText(clock[0][rnd]);
            clock2.setIcon(new ImageIcon(clock[2][rnd]));
        } else {
            aClock3.setText(clock[0][rnd]);
            clock3.setIcon(new ImageIcon(clock[2][rnd]));
        }
        check = clock[0][rnd];
        int r1, r2;
        do {
            r1 = (int) Math.ceil(Math.random() * 11 - 1);
            r2 = (int) Math.ceil(Math.random() * 11 - 1);
            if (r1 != rnd) {
                if (crnd == 1) {
                    aClock2.setText(clock[0][r1]);
                    clock2.setIcon(new ImageIcon(clock[2][r1]));
                } else if (crnd == 2) {
                    aClock3.setText(clock[0][r1]);
                    clock3.setIcon(new ImageIcon(clock[2][r1]));
                } else {
                    aClock1.setText(clock[0][r1]);
                    clock1.setIcon(new ImageIcon(clock[2][r1]));
                }
            }
            if (r2 != rnd && r1 != rnd) {
                if (crnd == 1) {
                    aClock3.setText(clock[0][r2]);
                    clock3.setIcon(new ImageIcon(clock[2][r2]));
                } else if (crnd == 2) {
                    aClock1.setText(clock[0][r2]);
                    clock1.setIcon(new ImageIcon(clock[2][r2]));
                } else {
                    aClock2.setText(clock[0][r2]);
                    clock2.setIcon(new ImageIcon(clock[2][r2]));
                }
            }
        } while (r2 == rnd || r1 == rnd || r1 == r2);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ICS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ICS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ICS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ICS.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ICS().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aClock1;
    private javax.swing.JLabel aClock2;
    private javax.swing.JLabel aClock3;
    private javax.swing.JButton back;
    private javax.swing.JButton clock1;
    private javax.swing.JButton clock2;
    private javax.swing.JButton clock3;
    private javax.swing.JLabel count1;
    private javax.swing.JLabel count2;
    private javax.swing.JLabel count3;
    private javax.swing.JLabel count4;
    private javax.swing.JLabel count5;
    private javax.swing.JLabel count6;
    private javax.swing.JLabel count7;
    private javax.swing.JLabel count8;
    private javax.swing.JLabel count9;
    private javax.swing.JButton counting;
    private javax.swing.JLabel info;
    private javax.swing.JLabel out;
    private javax.swing.JButton record;
    private javax.swing.JButton schedule;
    private javax.swing.JLabel score1;
    private javax.swing.JLabel score2;
    private javax.swing.JLabel score3;
    private javax.swing.JLabel score4;
    private javax.swing.JLabel scoreBoard1;
    private javax.swing.JLabel scoreBoard10;
    private javax.swing.JLabel scoreBoard11;
    private javax.swing.JLabel scoreBoard12;
    private javax.swing.JLabel scoreBoard2;
    private javax.swing.JLabel scoreBoard3;
    private javax.swing.JLabel scoreBoard4;
    private javax.swing.JLabel scoreBoard5;
    private javax.swing.JLabel scoreBoard6;
    private javax.swing.JLabel scoreBoard7;
    private javax.swing.JLabel scoreBoard8;
    private javax.swing.JLabel scoreBoard9;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();//repaints when the timer goes off     
        requestFocus();//if something happens ie: click off window it forces its self to the front (needed for key presses)        
    }

    public void hide() {
        out.setText("");
        title.setText("Title Screen");
        counting.setVisible(true);
        schedule.setVisible(true);
        record.setVisible(true);
        score1.setVisible(false);
        score2.setVisible(false);
        score3.setVisible(false);
        score4.setVisible(false);
        clock1.setVisible(false);
        clock2.setVisible(false);
        clock3.setVisible(false);
        scoreBoard1.setVisible(false);
        scoreBoard2.setVisible(false);
        scoreBoard3.setVisible(false);
        scoreBoard4.setVisible(false);
        scoreBoard5.setVisible(false);
        scoreBoard6.setVisible(false);
        scoreBoard7.setVisible(false);
        scoreBoard8.setVisible(false);
        scoreBoard9.setVisible(false);
        scoreBoard10.setVisible(false);
        scoreBoard11.setVisible(false);
        scoreBoard12.setVisible(false);
        aClock1.setText("");
        aClock2.setText("");
        aClock3.setText("");
        info.setText("");
        mode = 0;
        countClear();
    }

    public void keyPressed(KeyEvent e) {
        if ((e.getKeyChar() == KeyEvent.VK_ESCAPE)) {
            hide();

        }
        if (mode == 1) {//only lets numbers be pressed
            if (out.getText().equals("Correct!")) {
                countClear();
                out.setText("");
                crnd = (int) Math.ceil(Math.random() * 9);//sets up next round
                rnd = (int) Math.ceil(Math.random() * 5 - 1);
                count = m.counting(crnd, count, getWidth(), getHeight());
                countPos();
            } else if ((e.getKeyChar() == '0' || e.getKeyChar() == '1' || e.getKeyChar() == '2' || e.getKeyChar() == '3' || e.getKeyChar() == '4' || e.getKeyChar() == '5' || e.getKeyChar() == '6' || e.getKeyChar() == '7' || e.getKeyChar() == '8' || e.getKeyChar() == '9')) {
                if (crnd == Integer.parseInt(String.valueOf(e.getKeyChar()))) {//checks if the key pressed is what was generated
                    out.setText("Correct!");
                    tries++;
                    correct++;
                    curr++;
                } else {
                    out.setText("Incorrect, Please Try Again");
                    tries++;
                    curr = 0;
                }
            }
        }
        if (curr > thisT) {
            thisT = curr;
        }
        if (curr > streak) {
            streak = curr;
        }
        score1.setText("Correct: " + correct);
        score2.setText("Tries: " + tries);
        if (tries > 0) {
            score3.setText("Percent Correct: " + Math.round((double) correct / tries * 100) + "%");
        }
        score4.setText("Longest Streak: " + thisT);
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

}
