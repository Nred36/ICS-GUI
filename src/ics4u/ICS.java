/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ics4u;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.ImageIcon;

/**
 *
 * @author Nred
 */
public class ICS extends javax.swing.JFrame implements ActionListener, KeyListener {

    //Used across the board
    Methods m = new Methods();
    String[] picz = new String[7];
    ImageIcon[] in = new ImageIcon[7];
    int rnd, mode = 0, streak, curr;
    //used only in counting
    int crnd = (int) Math.ceil(Math.random() * 9);
    int[][] count = new int[10][2];
    int correct = 0, tries = 0;

    //used only in schedule
    String[][] clock = new String[3][11];
    String check;

    /**
     * Creates new form ICS
     */
    public ICS() {
        try {
            FileReader fr = new FileReader("save.txt"); //reads from text file (located in "files"
            BufferedReader br = new BufferedReader(fr);
            //read and puts each line in the text document into a variable
            for (int i = 0; i < picz.length; i++) {
                picz[i] = br.readLine();
                in[i] = new ImageIcon(picz[i]);
            }
            for (int r = 0; r < 3; r++) {
                for (int c = 0; c < 11; c++) {
                    clock[r][c] = br.readLine();
                }
            }
            streak = Integer.parseInt(br.readLine());
            fr.close();
            br.close();
        } catch (IOException a) {
            System.out.println("Couldn't Load");//if it fails
        }
        initComponents();
        addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Clock1 = new javax.swing.JButton();
        Clock3 = new javax.swing.JButton();
        Clock2 = new javax.swing.JButton();
        aClock3 = new javax.swing.JLabel();
        aClock1 = new javax.swing.JLabel();
        aClock2 = new javax.swing.JLabel();
        count1 = new javax.swing.JLabel();
        count2 = new javax.swing.JLabel();
        count3 = new javax.swing.JLabel();
        count4 = new javax.swing.JLabel();
        count5 = new javax.swing.JLabel();
        count6 = new javax.swing.JLabel();
        count7 = new javax.swing.JLabel();
        count8 = new javax.swing.JLabel();
        count9 = new javax.swing.JLabel();
        score1 = new javax.swing.JLabel();
        score2 = new javax.swing.JLabel();
        score4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        out = new javax.swing.JLabel();
        score3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1185, 649));
        setResizable(false);
        getContentPane().setLayout(null);

        jButton2.setText("Counting");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setFocusPainted(true);
        jButton2.setFocusable(false);
        jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton2.setPreferredSize(new java.awt.Dimension(73, 22));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(300, 313, 100, 22);

        jButton4.setText("Schedule");
        jButton4.setBorder(null);
        jButton4.setFocusPainted(false);
        jButton4.setFocusable(false);
        jButton4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton4.setPreferredSize(new java.awt.Dimension(73, 22));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(825, 313, 110, 22);

        Clock1.setFocusable(false);
        Clock1.setPreferredSize(new java.awt.Dimension(73, 73));
        Clock1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clock1ActionPerformed(evt);
            }
        });
        getContentPane().add(Clock1);
        Clock1.setBounds(1050, 70, 90, 90);
        Clock1.setVisible(false);

        Clock3.setFocusable(false);
        Clock3.setPreferredSize(new java.awt.Dimension(73, 73));
        Clock3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clock3ActionPerformed(evt);
            }
        });
        getContentPane().add(Clock3);
        Clock3.setBounds(1050, 460, 90, 90);
        Clock3.setVisible(false);

        Clock2.setFocusable(false);
        Clock2.setPreferredSize(new java.awt.Dimension(73, 73));
        Clock2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clock2ActionPerformed(evt);
            }
        });
        getContentPane().add(Clock2);
        Clock2.setBounds(1050, 270, 90, 90);
        Clock2.setVisible(false);

        aClock3.setText("jLabel1");
        aClock3.setFocusable(false);
        getContentPane().add(aClock3);
        aClock3.setBounds(1070, 560, 70, 20);
        aClock3.setVisible(false);

        aClock1.setText("jLabel1");
        aClock1.setFocusable(false);
        getContentPane().add(aClock1);
        aClock1.setBounds(1070, 170, 70, 20);
        aClock1.setVisible(false);

        aClock2.setText("jLabel1");
        aClock2.setFocusable(false);
        getContentPane().add(aClock2);
        aClock2.setBounds(1070, 370, 70, 20);
        aClock2.setVisible(false);

        count1.setFocusable(false);
        getContentPane().add(count1);
        count1.setBounds(190, 100, 100, 100);

        count2.setFocusable(false);
        getContentPane().add(count2);
        count2.setBounds(270, 90, 100, 100);

        count3.setFocusable(false);
        getContentPane().add(count3);
        count3.setBounds(370, 80, 100, 100);

        count4.setFocusable(false);
        getContentPane().add(count4);
        count4.setBounds(440, 90, 100, 100);

        count5.setFocusable(false);
        getContentPane().add(count5);
        count5.setBounds(490, 90, 100, 100);

        count6.setFocusable(false);
        getContentPane().add(count6);
        count6.setBounds(630, 80, 100, 100);

        count7.setFocusable(false);
        getContentPane().add(count7);
        count7.setBounds(680, 120, 100, 100);

        count8.setFocusable(false);
        getContentPane().add(count8);
        count8.setBounds(750, 180, 100, 100);

        count9.setFocusable(false);
        getContentPane().add(count9);
        count9.setBounds(610, 200, 100, 100);

        score1.setText("Correct: 0");
        score1.setFocusable(false);
        getContentPane().add(score1);
        score1.setBounds(50, 500, 170, 14);
        score1.setVisible(false);

        score2.setText("Tries: 0");
        score2.setFocusable(false);
        getContentPane().add(score2);
        score2.setBounds(50, 530, 130, 14);
        score2.setVisible(false);

        score4.setText("Longest Streak: "+streak);
        score4.setFocusable(false);
        getContentPane().add(score4);
        score4.setBounds(50, 590, 130, 14);
        score4.setVisible(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(jLabel11);
        jLabel11.setBounds(384, 300, 190, 30);
        getContentPane().add(out);
        out.setBounds(300, 250, 80, 40);

        score3.setText("Percent Correct: 0");
        score3.setFocusable(false);
        getContentPane().add(score3);
        score3.setBounds(50, 560, 130, 14);
        score3.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton2.setVisible(false);
        jButton4.setVisible(false);
        score1.setVisible(true);
        score2.setVisible(true);
        score3.setVisible(true);
        score4.setVisible(true);
        mode = 1;
        rnd = (int) Math.ceil(Math.random() * 2 + 4);//runs corresponding game
        count = m.counting(crnd, count, getWidth(), getHeight());
        countPos();
    }//GEN-LAST:event_jButton2ActionPerformed
    public void countClear() {
        count1.setIcon(null);
        count2.setIcon(null);
        count3.setIcon(null);
        count4.setIcon(null);
        count5.setIcon(null);
        count6.setIcon(null);
        count7.setIcon(null);
        count8.setIcon(null);
        count9.setIcon(null);
    }

    public void countPos() {
        if (crnd >= 1) {
            count1.setBounds(count[0][0], count[0][1], 100, 100);
            count1.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 2) {
            count2.setBounds(count[1][0], count[1][1], 100, 100);
            count2.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 3) {
            count3.setBounds(count[2][0], count[2][1], 100, 100);
            count3.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 4) {
            count4.setBounds(count[3][0], count[3][1], 100, 100);
            count4.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 5) {
            count5.setBounds(count[4][0], count[4][1], 100, 100);
            count5.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 6) {
            count6.setBounds(count[5][0], count[5][1], 100, 100);
            count6.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 7) {
            count7.setBounds(count[6][0], count[6][1], 100, 100);
            count7.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 8) {
            count8.setBounds(count[7][0], count[7][1], 100, 100);
            count8.setIcon(in[rnd]);//draws the blocks in there random position
        }
        if (crnd >= 9) {
            count9.setBounds(count[8][0], count[8][1], 100, 100);
            count9.setIcon(in[rnd]);//draws the blocks in there random position
        }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jButton2.setVisible(false);
        jButton4.setVisible(false);
        mode = 1;
        Clock1.setVisible(true);
        Clock2.setVisible(true);
        Clock3.setVisible(true);
        aClock1.setVisible(true);
        aClock2.setVisible(true);
        aClock3.setVisible(true);
        time();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void Clock1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clock1ActionPerformed
        checkClock(aClock1.getText());
    }//GEN-LAST:event_Clock1ActionPerformed

    private void Clock2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clock2ActionPerformed
        checkClock(aClock2.getText());
    }//GEN-LAST:event_Clock2ActionPerformed

    private void Clock3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clock3ActionPerformed
        checkClock(aClock3.getText());
    }//GEN-LAST:event_Clock3ActionPerformed
    public void checkClock(String s) {
        if (s.equals(check)) {
            out.setText("Correct");
            time();
        } else {
            out.setText("Incorrect");
        }
    }

    public void time() {
        crnd = (int) Math.ceil(Math.random() * 3);
        rnd = (int) Math.ceil(Math.random() * 11 - 1);
        jLabel11.setText(clock[1][rnd]);
        if (crnd == 1) {
            aClock1.setText(clock[0][rnd]);
            Clock1.setIcon(new ImageIcon(clock[2][rnd]));
        } else if (crnd == 2) {
            aClock2.setText(clock[0][rnd]);
            Clock2.setIcon(new ImageIcon(clock[2][rnd]));
        } else {
            aClock3.setText(clock[0][rnd]);
            Clock3.setIcon(new ImageIcon(clock[2][rnd]));
        }
        check = clock[0][rnd];
        int r1, r2;
        do {
            r1 = (int) Math.ceil(Math.random() * 11 - 1);
            r2 = (int) Math.ceil(Math.random() * 11 - 1);
            if (r1 != rnd) {
                if (crnd == 1) {
                    aClock2.setText(clock[0][r1]);
                    Clock2.setIcon(new ImageIcon(clock[2][r1]));
                } else if (crnd == 2) {
                    aClock3.setText(clock[0][r1]);
                    Clock3.setIcon(new ImageIcon(clock[2][r1]));
                } else {
                    aClock1.setText(clock[0][r1]);
                    Clock1.setIcon(new ImageIcon(clock[2][r1]));
                }
            }
            if (r2 != rnd && r1 != rnd) {
                if (crnd == 1) {
                    aClock3.setText(clock[0][r2]);
                    Clock3.setIcon(new ImageIcon(clock[2][r2]));
                } else if (crnd == 2) {
                    aClock1.setText(clock[0][r2]);
                    Clock1.setIcon(new ImageIcon(clock[2][r2]));
                } else {
                    aClock2.setText(clock[0][r2]);
                    Clock2.setIcon(new ImageIcon(clock[2][r2]));
                }
            }
        } while (r2 == rnd || r1 == rnd || r1 == r2);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ICS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ICS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ICS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ICS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ICS().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clock1;
    private javax.swing.JButton Clock2;
    private javax.swing.JButton Clock3;
    private javax.swing.JLabel aClock1;
    private javax.swing.JLabel aClock2;
    private javax.swing.JLabel aClock3;
    private javax.swing.JLabel count1;
    private javax.swing.JLabel count2;
    private javax.swing.JLabel count3;
    private javax.swing.JLabel count4;
    private javax.swing.JLabel count5;
    private javax.swing.JLabel count6;
    private javax.swing.JLabel count7;
    private javax.swing.JLabel count8;
    private javax.swing.JLabel count9;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel out;
    private javax.swing.JLabel score1;
    private javax.swing.JLabel score2;
    private javax.swing.JLabel score3;
    private javax.swing.JLabel score4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();//repaints when the timer goes off     
        requestFocus();//if something happens ie: click off window it forces its self to the front (needed for key presses)
    }

    public void keyPressed(KeyEvent e) {
        if ((e.getKeyChar() == KeyEvent.VK_ESCAPE)) {
            mode = 0;
            jButton2.setVisible(true);
            jButton4.setVisible(true);
        }
        if (mode == 1) {//only lets numbers be pressed
            if (out.getText().equals("Correct")) {
                countClear();
                out.setText("");
                crnd = (int) Math.ceil(Math.random() * 9);//sets up next round
                rnd = (int) Math.ceil(Math.random() * 2 + 4);
                count = m.counting(crnd, count, getWidth(), getHeight());
                countPos();
            } else if ((e.getKeyChar() == '0' || e.getKeyChar() == '1' || e.getKeyChar() == '2' || e.getKeyChar() == '3' || e.getKeyChar() == '4' || e.getKeyChar() == '5' || e.getKeyChar() == '6' || e.getKeyChar() == '7' || e.getKeyChar() == '8' || e.getKeyChar() == '9')) {
                if (crnd == Integer.parseInt(String.valueOf(e.getKeyChar()))) {//checks if the key pressed is what was generated
                    out.setText("Correct");
                    tries++;
                    correct++;
                    curr++;
                } else {
                    out.setText("Incorrect");
                    tries++;
                    curr = 0;
                }
            }
        }
        if (curr > streak) {
            streak = curr;
        }
        score1.setText("Correct: " + correct);
        score2.setText("Tries: " + tries);
        if (tries > 0) {
            score4.setText("Percent Correct: " + Math.round((double) correct / tries * 100) + "%");
        }
        score4.setText("Longest Streak: " + streak);
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
